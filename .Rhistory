complexity <- 1
nokia.tobe.price <- (instalion / (1 - .2) + commissioning / (1 - .35) + integration / (1 - .5)) * complexity
improvment <- (nokia.initial.price - nokia.tobe.price) / nokia.initial.price
nokia.tobe.margin <- 1- sub.tobe.price / nokia.tobe.price
operator.improvment <- (nokia.initial.price - nokia.tobe.price) / nokia.initial.price
complexity <- 1.1
nokia.tobe.price <- (instalion / (1 - .2) + commissioning / (1 - .35) + integration / (1 - .5)) * complexity
improvment <- (nokia.initial.price - nokia.tobe.price) / nokia.initial.price
nokia.tobe.margin <- 1- sub.tobe.price / nokia.tobe.price
operator.improvment <- (nokia.initial.price - nokia.tobe.price) / nokia.initial.price
library("swirl", lib.loc="~/R/win-library/3.2")
install.packages(c("manipulate", "testthat"))
library("swirl", lib.loc="~/R/win-library/3.2")
rm(list=ls())
install.packages("ggvis")
head(mtcars)
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
library(ggvis)
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points(size := 25, shape := "diamond", stroke := "red", fill := NA)
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points() %>%
layer_smooths()
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points() %>%
layer_model_predictions(model = "lm", se = TRUE)
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_points(fill = ~factor(cyl))
mtcars %>%
ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
group_by(cyl) %>%
layer_model_predictions(model = "lm")
swirl()
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
rm(list=ls())
swirl()
remove.packages(ggvis)
remove.packages("ggvis")
swirl()
rm(list=ls())
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
rm(list=ls())
swirl()
swirl()
uninstall_course(Exploratory Data Analysis Hierarchical Clustering)
uninstall_course("Exploratory Data Analysis Hierarchical Clustering"")
""
uninstall_course("Exploratory Data Analysis Hierarchical Clustering")
swirl()
install_course_github("Exploratory Data Analysis")
library("swirl", lib.loc="~/R/win-library/3.2")
install_course_github("Exploratory Data Analysis")
install_course_github(Exploratory Data Analysis)
install_from_swirl(Exploratory Data Analysis)
install_from_swirl("Exploratory Data Analysis")
rm(list=ls())
swirl()
uninstall_course("Exploratory Data Analysis")
swirl()
remove.packages("swirl")
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library("swirl", lib.loc="~/R/win-library/3.2")
install_from_swirl("Exploratory Data Analysis")
rm(list=ls())
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
ablie(h=1.5, col="blue")
abline(h=1.5, col="blue")
abline(h=4, col="red")
abline(h=.4, col="red")
5
5
abline(h=.5, col="red")
5
4
6
5
12
abline(h=.05, col="grenn")
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
dist(distmt)
distmt
cmat
plot(cx, cy, col=c("red", "orange", "purple", pch = 3, cex = 2, lwd = 2))
points(cx, cy, col=c("red", "orange", "purple", pch = 3, cex = 2, lwd = 2))
points(cx, cy, col=c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex= 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, pch = 19, col = col1, cex= 2, lwd = 2)
points(newCx, newCy, pch = 19, col = cols1, cex= 2, lwd = 2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x, y, newCs, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,col=cols1[newClust2],pch=19,cex=2)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy,col=cols1,pch=9,cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
library("grDevices", lib.loc="C:/Program Files/R/R-3.2.0/library")
install.packages("ggfortify")
colors()
pal <- colorRamp(c("red", "blue"))
pal(0)
pal <- colorRamp(c("red", "blue", "olivedrab"))
pal(0)
pal(.4)
pal(seq(0, 1, len = 100))
plot(x, y, col = pal(seq(0, 1, len = 100)))
pal <- colorRamp(c("red", "blue"))
plot(x, y, col = pal(seq(0, 1, len = 100)))
data(mtcars)
library(devtools)
install_github('slidify', ramnathv)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install.packages(c("crayon", "dplyr", "ggvis", "lme4", "manipulate", "MASS", "plyr", "pryr", "robustbase", "rversions", "scales", "shiny", "stringi"))
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages(c("httpuv", "manipulate", "mapproj", "maps"))
install.packages("mapproj")
install.packages("mapproj")
install.packages("rJava")
install.packages("mapproj")
install.packages("kernlab")
library(kernlab)
data("spam")
set.seed(3435)
trainIndicator = rbinom(4601. size = 1, prob = 0.5)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
trainIndicator
table(trainIndicator)
library(dplyr)
trainSpam <- filter(spam, trainIndicator == 1)
testSpam <- filter(spam, trainIndicator == 0)
View(spam)
nrow(spam)
trainIndicator = rbinom(nrow(spam), size = 1, prob = 0.5)
trainIndicator
table(trainIndicator)
trainSpam <- filter(spam, trainIndicator == 1)
testSpam <- filter(spam, trainIndicator == 0)
nrow(spam)
names(trainSpam)
head(trainSpam)
glimpse(trainSpam)
table(trainSpam$type)
plot(log10(trainSpam$capitalAve +1) ~ trainSpam$type)
plot(log10(trainSpam))
plot(log10(trainSpam + 1))
plot(log10(trainSpa[, 1:4]m + 1))
plot(log10(trainSpam[, 1:4] + 1))
plot(log10(trainSpam[,] + 1))
plot(log10(trainSpam[, 1:10] + 1))
library(ggvis)
mtcars %>% ggvis(~wt, ~mpg, fill := "blue") %>% layer_points()
# Change the code below draw smooths instead of points
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
# Change the code below to make a graph containing both points and a smoothed summary line
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()
# Change the code below to make a graph with red points
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
# Change the code below draw smooths instead of points
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()
# Change the code below to make a graph containing both points and a smoothed summary line
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()
faithful %>%
ggvis­(~w­ait­ing­,~e­rup­tions) %>% layer_­poi­nts() %>%
faithful %>% ggvis­(~w­ait­ing­,~e­rup­tions) %>% layer_­poi­nts() %>%
mtcars %>% ggvis(~wt, ~mpg) %>% layer_bars() %>% layer_smooths()
shiny::runApp(system.file("demo/apps/basic", package = "ggvis"))
str(data)
str(data)
summary(data)
summary(data)
```{r visualize data and NAs}
str(data)
summary(data)
```
print.xtable(xtable(head(data)))
storm_data <- tbdl_df(data)
storm_data <- tbl_df(data)
library(dplyr)
library(lubridate)
library(ggplot2)
library(chron)
library(xtable)
data <- read.csv(bzfile("StormData.csv.bz2"))
setwd("D:/Google Drive/Data/Competence Development/Coursera/Data Science/Reproducible Research/RepData_PeerAssessment2")
data <- read.csv(bzfile("StormData.csv.bz2"))
storm_data <- tbl_df(data)
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables)
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
View(storm_data)
levels(storm_data$EVTYPE)
if(!file.exists("StormData.csv.bz2"))
bzfile("StormData.csv.bz2")
data <- read.csv("StormData.csv.bz2")
View(data)
if(!file.exists("StormData.csv"))
bzfile("StormData.csv.bz2")
data <- read.csv("StormData.csv")
glimpse(data)
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
levels(storm_data$EVTYPE)
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data %>% group_by(EVTYPE) %>% summarise(fatalities = sum(FATALITIES), injuries= sum(INJURIES))
storm_data %>% group_by(EVTYPE) %>% summarise(fatalities = sum(FATALITIES), injuries= sum(INJURIES)) %>%
arrange(fatalities, injuries)
storm_data %>% group_by(EVTYPE) %>% summarise(fatalities = sum(FATALITIES), injuries= sum(INJURIES)) %>%
arrange(desc(fatalities, injuries))
levels(storm_data$EVTYPE)
levels(storm_data %>% filter(EVTYPE, grep("Thunderstorm Wind")))
test <- storm_data %>% filter(EVTYPE, grep("Thunderstorm Wind"))
test <- storm_data %>% filter(EVTYPE == grep("Thunderstorm Wind"))
test <- storm_data %>% filter(EVTYPE == grep("Thunderstorm Wind", value = TUE))
test <- storm_data %>% filter(EVTYPE == grep("Thunderstorm Wind", perl =TRUE, value = TRUE))
test <- storm_data %>% filter(EVTYPE %in% grep("Thunderstorm Wind", perl =TRUE, value = TRUE))
test <- storm_data %>% filter(grep("Thunderstorm Wind", EVTYPE, perl =TRUE, value = TRUE))
test <- storm_data %>% filter(EVTYPE == grep("Thunderstorm Wind", EVTYPE, perl =TRUE, value = TRUE))
levels(test)
levels(test$EVTYPE)
select(test,EVTYPE)
test <- storm_data %>% filter(EVTYPE == grep("Thunderstorm Wind+", EVTYPE, perl =TRUE, value = TRUE))
select(test,EVTYPE)
current_events <- levels(storm_data$EVTYPE)
official_events <- c("Astronomical Low Tide", "Avalanche", "Blizzard", "Coastal Flood",
"Cold/Wind Chill", "Debris Flow", "Dense Fog", "Dense Smoke", "Drought",
"Dust Devil", "Dust Storm", "Excessive Heat", "Extreme cold/Wind Chill",
"Flash Flood", "Flood", "Freezing", "Frost/Freeze", "Funnel Cloud", "Hail",
"Heat", "Heavy Rain", "Heavy Snow", "High Surf", "High Wind", "Hurricane/Typhoon",
"Ice Storm", "Lakeshore Flood", "Lake-Effect Snow", "Lightning", "Marine Hail",
"Marine High Wind", "Marine Strong Wind", "Marine Thunderstorm Wind", "Rip Current",
"Seiche", "Sleet", "Storm Tide", "Strong Wind", "Thunderstorm Wind", "Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami", "Volcanic Ash", "Waterspout",
"Wildfire", "Winter Storm", "Winter Weather")
new_events <- sppaly(official_events, gsub, replacement = official_events, current_events)
new_events <- sapply(official_events, gsub, replacement = official_events, current_events)
warnings
warnings()
new_events <- sapply(official_events, gsub, replacement = official_events, x = current_events)
View(new_events)
new_events
for (i in length(official_events)) {
current_events[grepl(official_events[i], current_events)] <- official_events[i]
}
for (i in 1:length(official_events)) {
current_events[grepl(official_events[i], current_events)] <- official_events[i]
}
grepl(official_events[1], current_events)
test <- storm_data %>% mutate(EVENT =  ifelse(grepl(official_events, EVTYPE), official_events, NA))
View(test)
grepl(official_events, storm_data$EVTYPE)
test <- sapply(official_events, grepl(storm_data$EVTYPE))
test <- sapply(official_events, grepl, storm_data$EVTYPE)
View(test)
test <- storm_data %>% mutate(EVENT =  ifelse(grepl(official_events, EVTYPE), official_events, NA))
test <- storm_data %>% mutate(EVENT =  ifelse(grepl(paste0("*", official_events, "*"), EVTYPE), official_events, NA))
test <- sapply(official_events, grepl, storm_data$EVTYPE)
test <- storm_data %>% mutate(EVENT =  ifelse(grepl(paste0("*", official_events, "*"), EVTYPE), official_events, NA))
View(test)
for (i in 1:length(official_events)) {
current_events[grepl(paste0("*", official_events, "*")] <- official_events[i]
for (i in 1:length(official_events))
current_events[grepl(paste0("*", official_events[i], "*"), current_events] <- official_events[i]
for (i in 1:length(official_events))
current_events[grepl(paste0("*", official_events[i], "*"), current_events)] <- official_events[i]
current_events
current_events[grepl(paste0("*", official_events[1], "*"), current_events)] <- official_events[1]
current_events
current_events[1]
grepl(paste0("*", official_events[1], "*"), current_events)
grepl(paste0("*", official_events[1], "*"), current_events[])
grepl(paste0("*", official_events[1], "*"), current_events[], ignore.case = TRUE)
sum(grepl(paste0("*", official_events[1], "*"), current_events[], ignore.case = TRUE))
sum(grepl(paste0("*", official_events[2], "*"), current_events[], ignore.case = TRUE))
current_events[grepl(paste0("^", official_events[1], "^"), current_events)] <- official_events[1]
sum(grepl(paste0("^", official_events[2], "^"), current_events[], ignore.case = TRUE))
sum(pmatch(official_events[2], current_events[], duplicates.ok = TRUE, ignore.case = TRUE))
sum(current_events[grepl(paste0("*", official_events[1], "*"), current_events)] <- official_events[1])
sum(current_events[grepl(paste0("*", official_events[1], "*"), current_events[])] <- official_events[1])
sum(current_events[grepl(paste0("*", official_events[1], "*"), current_events)] <- official_events[1])
grepl(paste0("*", official_events[1], "*"), current_events)
sum(grepl(paste0("*", official_events[1], "*"), current_events))
sum(current_events[grepl(paste0("^+", official_events[1], "$*"), current_events)] <- official_events[1])
sum(grepl(paste0("^*", official_events[1], "$*"), current_events))
sum(grepl(paste0("^*", official_events[1], "$*"), current_events), ignore.case = TRUE)
for (i in 1:length(official_events))
current_events[grepl(paste0("^*", official_events[i], "$*"), current_events,
ignore.case = TRUE)] <- official_events[i]
sum(current_events[grepl(paste0("[:alnum:]*", official_events[100], "[:alnum:]*"), current_events)] <- official_events[1])
sum(current_events[grepl(paste0("[:alnum:]*", official_events[49], "[:alnum:]*"), current_events)] <- official_events[49])
for (i in 1:length(official_events))
current_events[grepl(paste0("[:alnum:]*", official_events[i], "[:alnum:]*"), current_events,
ignore.case = TRUE)] <- official_events[i]
current_events
storm_data %>% group_by(EVTYPE) %>% summarise(fatalities = sum(FATALITIES), injuries= sum(INJURIES)) %>%
arrange(desc(fatalities, injuries))
storm_data %>% group_by(EVTYPE) %>% summarise(fatalities = sum(FATALITIES), injuries= sum(INJURIES), total = fatalities + injuries) %>%
arrange(desc(total, fatalities, injuries))
storm_data %>% group_by(EVTYPE) %>% summarise(total = fatalities + injuries, fatalities = sum(FATALITIES), injuries= sum(INJURIES)) %>%
arrange(desc(total, fatalities, injuries))
storm_data %>% group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total = fatalities + injuries) %>%
arrange(desc(total, fatalities, injuries))
harmful_to_population <- storm_data %>% group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total = fatalities + injuries) %>%
arrange(desc(total, fatalities, injuries))
test <- storm_data %>% mutate(EVENT =  ifelse(grepl(paste0("*", official_events, "*"), EVTYPE), official_events, NA))
View(harmful_to_population)
ggplot(harmful_to_population, aes(total, EVTYPE)) + geom_point()
ggplot(harmful_to_population, aes(EVTYPE, total)) + geom_point()
harmful_to_population <- storm_data %>% group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total = fatalities + injuries) %>%
arrange(desc(total, fatalities, injuries)) %>%  filter(EVTYPE != "TORNADO")
ggplot(harmful_to_population, aes(EVTYPE, total)) + geom_point()
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
View(storm_data)
View(data)
selected_variables <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggvis)
library(chron)
library(xtable)
selected_variables <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data$BGN_DATE <- ymd_hms(storm_data$BGN_DATE)
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data$BGN_DATE <- mdy_hms(as.character(storm_data$BGN_DATE))
View(storm_data)
storm_data <- storm_data %>% mutate(DATE = mdy_hms(as.character(BGN_DATE)))
storm_data$DATE <- mdy_hms(as.character(storm_data$BGN_DATE))
selected_variables <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data$DATE <- mdy_hms(as.character(storm_data$BGN_DATE))
selected_variables <- c("EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
storm_data <- tbl_df(data) %>% select(one_of(selected_variables))
storm_data$DATE <- mdy_hms(as.character(data$BGN_DATE))
View(storm_data)
ExpenditureNormalization <- function(exp) {
new_exp <- NA
new_exp[grep("K|k", exp)] <- "1000"
new_exp[grep("M|m", exp)] <- "1000000"
new_exp[grep("B|b", exp)] <- "1000000000"
as.numeric(new_exp)
}
storm_data <- storm_data %>% mutate(
PROPDMG_NORM = PROPDMG * ExpenditureNormalization(PROPDMGEXP),
CROPDMG_NORM = CROPDMG * ExpenditureNormalization(CROPDMGEXP))
harmful_to_population <- storm_data %>% group_by(EVTYPE) %>%
summarise(date = DATE, fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total_human = fatalities + injuries,
property = sum(PROPDMG_NORM),
crop = sum(CROPDMG_NORM),
total_economic = property + crop)
harmful_to_population <- storm_data %>% group_by(EVTYPE, DATE) %>%
summarise(
fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total_human = fatalities + injuries,
property = sum(PROPDMG_NORM),
crop = sum(CROPDMG_NORM),
total_economic = property + crop
)
View(harmful_to_population)
ExpenditureNormalization <- function(exp) {
new_exp <- 0
new_exp[grep("K|k", exp)] <- "1000"
new_exp[grep("M|m", exp)] <- "1000000"
new_exp[grep("B|b", exp)] <- "1000000000"
as.numeric(new_exp)
}
storm_data <- storm_data %>% mutate(
PROPDMG_NORM = PROPDMG * ExpenditureNormalization(PROPDMGEXP),
CROPDMG_NORM = CROPDMG * ExpenditureNormalization(CROPDMGEXP))
harmful_to_population <- storm_data %>% group_by(EVTYPE) %>%
summarise(
fatalities = sum(FATALITIES),
injuries= sum(INJURIES),
total_human = fatalities + injuries,
property = sum(PROPDMG_NORM),
crop = sum(CROPDMG_NORM),
total_economic = property + crop
)
View(harmful_to_population)
harmful_to_population <- storm_data %>% group_by(EVTYPE) %>%
summarise(
fatalities = sum(FATALITIES, na.rm = TRUE),
injuries= sum(INJURIES, na.rm = TRUE),
total_human = fatalities + injuries,
property = sum(PROPDMG_NORM, na.rm = TRUE),
crop = sum(CROPDMG_NORM, na.rm = TRUE),
total_economic = property + crop
)
View(harmful_to_population)
summary_calculations <- storm_data %>% group_by(EVTYPE) %>%
summarise(
fatalities = sum(FATALITIES, na.rm = TRUE),
injuries= sum(INJURIES, na.rm = TRUE),
total_human = fatalities + injuries,
property = sum(PROPDMG_NORM, na.rm = TRUE),
crop = sum(CROPDMG_NORM, na.rm = TRUE),
total_economic = property + crop
)
View(summary_calculations)
top10_fatalities <- summary_calculations %>% top_n(10, fatalities) %>%
select(EVTYPE, fatalities) %>% arrange(desc(fatalities))
top10_injuries <- summary_calculations %>% top_n(10, injuries) %>%
select(EVTYPE, injuries) %>% arrange(desc(injuries))
top10_human <- summary_calculations %>% top_n(10, total_human) %>%
select(EVTYPE, total) %>% arrange(desc(total))
top10_property <- summary_calculations %>% top_n(10, property) %>%
select(EVTYPE, property) %>% arrange(desc(property))
top10_crop <- summary_calculations %>% top_n(10, crop) %>%
select(EVTYPE, crop) %>% arrange(desc(crop))
top10_economic <- summary_calculations %>% top_n(10, economic) %>%
select(EVTYPE, economic) %>% arrange(desc(economic))
top10_fatalities <- summary_calculations %>% top_n(10, fatalities) %>%
select(EVTYPE, fatalities) %>% arrange(desc(fatalities))
top10_injuries <- summary_calculations %>% top_n(10, injuries) %>%
select(EVTYPE, injuries) %>% arrange(desc(injuries))
top10_human <- summary_calculations %>% top_n(10, total_human) %>%
select(EVTYPE, total) %>% arrange(desc(total))
top10_property <- summary_calculations %>% top_n(10, property) %>%
select(EVTYPE, property) %>% arrange(desc(property))
top10_crop <- summary_calculations %>% top_n(10, crop) %>%
select(EVTYPE, crop) %>% arrange(desc(crop))
top10_economic <- summary_calculations %>% top_n(10, total_economic) %>%
select(EVTYPE, total_economic) %>% arrange(desc(total_economic))
top10_fatalities <- summary_calculations %>% top_n(10, fatalities) %>%
select(EVTYPE, fatalities) %>% arrange(desc(fatalities))
top10_injuries <- summary_calculations %>% top_n(10, injuries) %>%
select(EVTYPE, injuries) %>% arrange(desc(injuries))
top10_human <- summary_calculations %>% top_n(10, total_human) %>%
select(EVTYPE, total_human) %>% arrange(desc(total_human))
top10_property <- summary_calculations %>% top_n(10, property) %>%
select(EVTYPE, property) %>% arrange(desc(property))
top10_crop <- summary_calculations %>% top_n(10, crop) %>%
select(EVTYPE, crop) %>% arrange(desc(crop))
top10_economic <- summary_calculations %>% top_n(10, total_economic) %>%
select(EVTYPE, total_economic) %>% arrange(desc(total_economic))
View(top10_crop)
View(top10_crop)
View(top10_economic)
View(top10_fatalities)
View(top10_human)
View(top10_injuries)
View(top10_property)
print.xtable(xtable(top10_fatalities))
